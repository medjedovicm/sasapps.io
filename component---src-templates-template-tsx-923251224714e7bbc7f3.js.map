{"version":3,"sources":["webpack:///./src/components/badge/badge.tsx","webpack:///./src/templates/post/post.tsx","webpack:///./src/templates/template.tsx"],"names":["Badges","label","primary","className","Post","data","frontmatter","post","path","html","key","style","boxShadow","to","title","dateTime","date","category","tags","map","tag","index","kebabCase","dangerouslySetInnerHTML","__html","pageQuery","Template","location","description","featuredImg","featuredImage","childImageSharp","fixed","src","site","meta","prependtitle","previewImg","customDescription","links"],"mappings":"8NAeeA,EARiB,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QACxC,OACE,0BAAMC,UAAS,UAAWD,EAAU,gBAAkB,oBACnDD,ICkCQG,G,UA/Be,SAAC,GAAoB,QAAlBC,EAAkB,EAAlBA,KACzBC,EAAW,UAAGD,EAAKE,YAAR,aAAG,EAAWD,YACzBE,GAAOF,aAAA,EAAAA,EAAaE,OAAQ,GAC5BC,GAAO,UAAAJ,EAAKE,YAAL,eAAWE,OAAQ,GAEhC,OACE,yBAAKN,UAAU,UAAUO,IAAKF,GAC5B,yBAAKL,UAAU,aACb,yBAAKA,UAAU,QACb,kBAAC,OAAD,CAAMQ,MAAO,CAAEC,UAAW,QAAUC,GAAIL,GACtC,4BAAKF,aAAL,EAAKA,EAAaQ,OAClB,0BAAMC,SAAUT,aAAF,EAAEA,EAAaU,MAAOV,aAApC,EAAoCA,EAAaU,OAEnD,kBAAC,EAAD,CAAOf,OAAOK,aAAA,EAAAA,EAAaW,WAAY,GAAIf,SAAS,MAClDI,aAAA,EAAAA,EAAaY,OAAQ,IAAIC,KAAI,SAACC,EAAKC,GAAN,OAC7B,kBAAC,OAAD,CAAMR,GAAE,SAAWS,IAAUF,GAArB,IAA8BV,IAAKW,GACzC,kBAAC,EAAD,CAAOpB,MAAOmB,EAAelB,SAAS,SAI5C,yBACEC,UAAU,UACVoB,wBAAyB,CACvBC,OAAQf,S,oCCWPgB,GAFEC,UA/BmB,SAAC,GAA8B,gBAA5BrB,EAA4B,EAA5BA,KAAMsB,EAAsB,EAAtBA,SACnCb,GAAQ,UAAAT,EAAKE,YAAL,mBAAWD,mBAAX,eAAwBQ,QAAS,GACzCc,GAAc,UAAAvB,EAAKE,YAAL,mBAAWD,mBAAX,eAAwBsB,cAAe,GACvDC,EAAW,UAAGxB,EAAKE,YAAR,aAAG,EAAWD,YAAYwB,cAAcC,gBAAgBC,MAGvE,OAFKH,IAAaA,EAAc,CAAEI,IAAK,KAGrC,6BACE,kBAAC,IAAD,CAAQN,SAAUA,GAChB,kBAAC,IAAD,CACEb,MAAOA,EACPoB,KAAI,UAAE7B,EAAK6B,YAAP,aAAE,EAAWC,KACjBC,cAAc,EACdC,WAAYR,EAAYI,IACxBK,kBAAmBV,IAErB,kBAAC,IAAD,CACEW,MAAO,CACL,CAAEtC,MAAO,OAAQY,GAAI,KACrB,CAAEZ,MAAO,OAAQY,GAAI,SACrB,CAAEZ,MAAOa,EAAOD,GAAI,QAGxB,yBAAKV,UAAU,aACb,kBAAC,EAAD,CAAME,KAAMA,QASG","file":"component---src-templates-template-tsx-923251224714e7bbc7f3.js","sourcesContent":["import React from 'react'\n\ninterface Props {\n  label: string\n  primary: boolean\n}\n\nconst Badges: React.FC<Props> = ({ label, primary }: Props) => {\n  return (\n    <span className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}>\n      {label}\n    </span>\n  )\n}\n\nexport default Badges\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport kebabCase from 'lodash/kebabCase'\n\nimport Badge from '../../components/badge/badge'\nimport { PostByPath } from '../../../types/graphql-types'\n\nimport './style.scss'\n\ninterface Props {\n  data: PostByPath\n}\n\nconst Post: React.FC<Props> = ({ data }: Props) => {\n  const frontmatter = data.post?.frontmatter\n  const path = frontmatter?.path || ''\n  const html = data.post?.html || ''\n\n  return (\n    <div className=\"article\" key={path}>\n      <div className=\"container\">\n        <div className=\"info\">\n          <Link style={{ boxShadow: 'none' }} to={path}>\n            <h1>{frontmatter?.title}</h1>\n            <time dateTime={frontmatter?.date}>{frontmatter?.date}</time>\n          </Link>\n          <Badge label={frontmatter?.category || ''} primary={true} />\n          {(frontmatter?.tags || []).map((tag, index) => (\n            <Link to={`/tags/${kebabCase(tag)}/`} key={index}>\n              <Badge label={tag as string} primary={false} />\n            </Link>\n          ))}\n        </div>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{\n            __html: html,\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import { graphql } from 'gatsby'\nimport React from 'react'\n\nimport Post from './post/post'\nimport Meta from '../components/meta/meta'\nimport Layout from '../components/layout/layout'\nimport Breadcrum from '../components/breadcrum/breadcrum'\nimport { PostByPath } from '../../types/graphql-types'\n\ninterface Props {\n  data: PostByPath\n  location: Location\n}\n\nconst Template: React.FC<Props> = ({ data, location }: Props) => {\n  const title = data.post?.frontmatter?.title || ''\n  const description = data.post?.frontmatter?.description || ''\n  let featuredImg = data.post?.frontmatter.featuredImage.childImageSharp.fixed\n  if (!featuredImg) featuredImg = { src: '' }\n\n  return (\n    <div>\n      <Layout location={location}>\n        <Meta\n          title={title}\n          site={data.site?.meta}\n          prependtitle={false}\n          previewImg={featuredImg.src}\n          customDescription={description}\n        />\n        <Breadcrum\n          links={[\n            { label: 'Home', to: '/' },\n            { label: 'Blog', to: '/blog' },\n            { label: title, to: '#' },\n          ]}\n        />\n        <div className=\"container\">\n          <Post data={data} />\n        </div>\n      </Layout>\n    </div>\n  )\n}\n\nexport default Template\n\nexport const pageQuery = graphql`\n  query PostByPath($path: String!) {\n    site {\n      meta: siteMetadata {\n        title\n        description\n        siteUrl\n        author\n        twitter\n        adsense\n      }\n    }\n    post: markdownRemark(frontmatter: { path: { eq: $path } }) {\n      id\n      html\n      frontmatter {\n        title\n        featuredImage {\n          childImageSharp {\n            fixed(width: 400) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        path\n        category\n        tags\n        description\n        date(formatString: \"YYYY/MM/DD\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}